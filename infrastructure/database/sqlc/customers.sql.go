// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: customers.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const getAllCustomers = `-- name: GetAllCustomers :many
SELECT id,
    name
FROM customers
ORDER BY name ASC
`

type GetAllCustomersRow struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) GetAllCustomers(ctx context.Context) ([]GetAllCustomersRow, error) {
	rows, err := q.db.Query(ctx, getAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllCustomersRow
	for rows.Next() {
		var i GetAllCustomersRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerCount = `-- name: GetCustomerCount :one
SELECT COUNT(*) FROM customers
`

func (q *Queries) GetCustomerCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCustomerCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getFilteredCustomers = `-- name: GetFilteredCustomers :many
SELECT customers.id,
    customers.name,
    customers.email,
    customers.image_url,
    COUNT(invoices.id) AS total_invoices,
    SUM(
        CASE
            WHEN invoices.status = 'pending' THEN invoices.amount
            ELSE 0
        END
    ) AS total_pending,
    SUM(
        CASE
            WHEN invoices.status = 'paid' THEN invoices.amount
            ELSE 0
        END
    ) AS total_paid
FROM customers
    LEFT JOIN invoices ON customers.id = invoices.customer_id
WHERE customers.name ILIKE $1
    OR customers.email ILIKE $1
GROUP BY customers.id,
    customers.name,
    customers.email,
    customers.image_url
ORDER BY customers.name ASC
`

type GetFilteredCustomersRow struct {
	ID            uuid.UUID `json:"id"`
	Name          string    `json:"name"`
	Email         string    `json:"email"`
	ImageUrl      string    `json:"image_url"`
	TotalInvoices int64     `json:"total_invoices"`
	TotalPending  int64     `json:"total_pending"`
	TotalPaid     int64     `json:"total_paid"`
}

func (q *Queries) GetFilteredCustomers(ctx context.Context, name string) ([]GetFilteredCustomersRow, error) {
	rows, err := q.db.Query(ctx, getFilteredCustomers, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFilteredCustomersRow
	for rows.Next() {
		var i GetFilteredCustomersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.ImageUrl,
			&i.TotalInvoices,
			&i.TotalPending,
			&i.TotalPaid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
