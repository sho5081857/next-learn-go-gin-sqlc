// Package presenter provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package presenter

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for InvoiceStatus.
const (
	Paid    InvoiceStatus = "paid"
	Pending InvoiceStatus = "pending"
)

// AllCustomer defines model for AllCustomer.
type AllCustomer struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// AllCustomerCount defines model for AllCustomerCount.
type AllCustomerCount struct {
	Total int `json:"total"`
}

// AllRevenue defines model for AllRevenue.
type AllRevenue struct {
	Month   string `json:"month"`
	Revenue int    `json:"revenue"`
}

// ApiVersion defines model for ApiVersion.
type ApiVersion = string

// CreateInvoiceRequest defines model for CreateInvoiceRequest.
type CreateInvoiceRequest struct {
	Amount     int                `json:"amount"`
	CustomerId openapi_types.UUID `json:"customer_id"`
	Date       Date               `json:"date"`
	Status     InvoiceStatus      `json:"status"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

// Date defines model for Date.
type Date = openapi_types.Date

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FilteredCustomer defines model for FilteredCustomer.
type FilteredCustomer struct {
	Email         openapi_types.Email `json:"email"`
	Id            openapi_types.UUID  `json:"id"`
	Name          string              `json:"name"`
	TotalInvoices int                 `json:"total_invoices"`
	TotalPaid     int                 `json:"total_paid"`
	TotalPending  int                 `json:"total_pending"`
}

// FilteredInvoice defines model for FilteredInvoice.
type FilteredInvoice struct {
	Amount     int                 `json:"amount"`
	CustomerId *openapi_types.UUID `json:"customer_id,omitempty"`
	Date       Date                `json:"date"`
	Email      string              `json:"email"`
	Id         openapi_types.UUID  `json:"id"`
	ImageUrl   string              `json:"image_url"`
	Name       string              `json:"name"`
	Status     InvoiceStatus       `json:"status"`
}

// Invoice defines model for Invoice.
type Invoice struct {
	Amount     int                `json:"amount"`
	CustomerId openapi_types.UUID `json:"customer_id"`
	Date       Date               `json:"date"`
	Id         openapi_types.UUID `json:"id"`
	Status     InvoiceStatus      `json:"status"`
}

// InvoiceStatus defines model for InvoiceStatus.
type InvoiceStatus string

// InvoicesCount defines model for InvoicesCount.
type InvoicesCount struct {
	Total int `json:"total"`
}

// InvoicesStatusCount defines model for InvoicesStatusCount.
type InvoicesStatusCount struct {
	Paid    int `json:"paid"`
	Pending int `json:"pending"`
}

// LatestInvoice defines model for LatestInvoice.
type LatestInvoice struct {
	Amount   int                `json:"amount"`
	Email    string             `json:"email"`
	Id       openapi_types.UUID `json:"id"`
	ImageUrl string             `json:"image_url"`
	Name     string             `json:"name"`
}

// LoginUser defines model for LoginUser.
type LoginUser struct {
	Email openapi_types.Email `json:"email"`
	Id    openapi_types.UUID  `json:"id"`
	Token string              `json:"token"`
}

// LoginUserRequest defines model for LoginUserRequest.
type LoginUserRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// UpdateInvoiceByIdRequest defines model for UpdateInvoiceByIdRequest.
type UpdateInvoiceByIdRequest struct {
	Amount     *int                `json:"amount,omitempty"`
	CustomerId *openapi_types.UUID `json:"customer_id,omitempty"`
	Date       *Date               `json:"date,omitempty"`
	Status     *InvoiceStatus      `json:"status,omitempty"`
}

// User defines model for User.
type User struct {
	Email openapi_types.Email `json:"email"`
	Id    openapi_types.UUID  `json:"id"`
	Name  string              `json:"name"`
}

// AllCustomersCountResponse defines model for AllCustomersCountResponse.
type AllCustomersCountResponse struct {
	ApiVersion ApiVersion       `json:"apiVersion"`
	Data       AllCustomerCount `json:"data"`
}

// AllCustomersListResponse defines model for AllCustomersListResponse.
type AllCustomersListResponse struct {
	ApiVersion ApiVersion    `json:"apiVersion"`
	Items      []AllCustomer `json:"items"`
}

// AllInvoicesCountResponse defines model for AllInvoicesCountResponse.
type AllInvoicesCountResponse struct {
	ApiVersion ApiVersion    `json:"apiVersion"`
	Data       InvoicesCount `json:"data"`
}

// AllRevenueListResponse defines model for AllRevenueListResponse.
type AllRevenueListResponse struct {
	ApiVersion ApiVersion   `json:"apiVersion"`
	Items      []AllRevenue `json:"items"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error Error `json:"error"`
}

// FilteredCustomersListResponse defines model for FilteredCustomersListResponse.
type FilteredCustomersListResponse struct {
	ApiVersion ApiVersion         `json:"apiVersion"`
	Items      []FilteredCustomer `json:"items"`
}

// FilteredInvoicesListResponse defines model for FilteredInvoicesListResponse.
type FilteredInvoicesListResponse struct {
	ApiVersion ApiVersion        `json:"apiVersion"`
	Items      []FilteredInvoice `json:"items"`
	TotalItems int               `json:"totalItems"`
}

// InvoiceResponse defines model for InvoiceResponse.
type InvoiceResponse struct {
	ApiVersion ApiVersion `json:"apiVersion"`
	Data       Invoice    `json:"data"`
}

// InvoicesStatusCountResponse defines model for InvoicesStatusCountResponse.
type InvoicesStatusCountResponse struct {
	ApiVersion ApiVersion          `json:"apiVersion"`
	Data       InvoicesStatusCount `json:"data"`
}

// LatestInvoicesListResponse defines model for LatestInvoicesListResponse.
type LatestInvoicesListResponse struct {
	ApiVersion ApiVersion      `json:"apiVersion"`
	Items      []LatestInvoice `json:"items"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	ApiVersion ApiVersion `json:"apiVersion"`
	Data       LoginUser  `json:"data"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	ApiVersion ApiVersion `json:"apiVersion"`
	Data       User       `json:"data"`
}

// CreateInvoiceRequestBody defines model for CreateInvoiceRequestBody.
type CreateInvoiceRequestBody = CreateInvoiceRequest

// CreateUserRequestBody defines model for CreateUserRequestBody.
type CreateUserRequestBody = CreateUserRequest

// LoginUserRequestBody defines model for LoginUserRequestBody.
type LoginUserRequestBody = LoginUserRequest

// UpdateInvoiceByIdRequestBody defines model for UpdateInvoiceByIdRequestBody.
type UpdateInvoiceByIdRequestBody = UpdateInvoiceByIdRequest

// GetFilteredCustomersListParams defines parameters for GetFilteredCustomersList.
type GetFilteredCustomersListParams struct {
	Query *string `form:"query,omitempty" json:"query,omitempty"`
}

// GetFilteredInvoicesListParams defines parameters for GetFilteredInvoicesList.
type GetFilteredInvoicesListParams struct {
	Query  *string `form:"query,omitempty" json:"query,omitempty"`
	Limit  *int    `form:"limit,omitempty" json:"limit,omitempty"`
	Offset *int    `form:"offset,omitempty" json:"offset,omitempty"`
}

// CreateInvoiceJSONRequestBody defines body for CreateInvoice for application/json ContentType.
type CreateInvoiceJSONRequestBody = CreateInvoiceRequest

// UpdateInvoiceByIdJSONRequestBody defines body for UpdateInvoiceById for application/json ContentType.
type UpdateInvoiceByIdJSONRequestBody = UpdateInvoiceByIdRequest

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginUserRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = CreateUserRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllCustomersList request
	GetAllCustomersList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllCustomersCount request
	GetAllCustomersCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilteredCustomersList request
	GetFilteredCustomersList(ctx context.Context, params *GetFilteredCustomersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInvoiceWithBody request with any body
	CreateInvoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInvoice(ctx context.Context, body CreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllInvoicesCount request
	GetAllInvoicesCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFilteredInvoicesList request
	GetFilteredInvoicesList(ctx context.Context, params *GetFilteredInvoicesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLatestInvoicesList request
	GetLatestInvoicesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllInvoicesStatusCount request
	GetAllInvoicesStatusCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInvoiceById request
	DeleteInvoiceById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoiceById request
	GetInvoiceById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateInvoiceByIdWithBody request with any body
	UpdateInvoiceByIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateInvoiceById(ctx context.Context, id openapi_types.UUID, body UpdateInvoiceByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginUserWithBody request with any body
	LoginUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LoginUser(ctx context.Context, body LoginUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterUserWithBody request with any body
	RegisterUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterUser(ctx context.Context, body RegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllRevenueList request
	GetAllRevenueList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllCustomersList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCustomersListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllCustomersCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCustomersCountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilteredCustomersList(ctx context.Context, params *GetFilteredCustomersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilteredCustomersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvoiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvoiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInvoice(ctx context.Context, body CreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInvoiceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllInvoicesCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllInvoicesCountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFilteredInvoicesList(ctx context.Context, params *GetFilteredInvoicesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFilteredInvoicesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLatestInvoicesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLatestInvoicesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllInvoicesStatusCount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllInvoicesStatusCountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInvoiceById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInvoiceByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoiceById(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoiceByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInvoiceByIdWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInvoiceByIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInvoiceById(ctx context.Context, id openapi_types.UUID, body UpdateInvoiceByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInvoiceByIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginUser(ctx context.Context, body LoginUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterUser(ctx context.Context, body RegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllRevenueList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllRevenueListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllCustomersListRequest generates requests for GetAllCustomersList
func NewGetAllCustomersListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllCustomersCountRequest generates requests for GetAllCustomersCount
func NewGetAllCustomersCountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFilteredCustomersListRequest generates requests for GetFilteredCustomersList
func NewGetFilteredCustomersListRequest(server string, params *GetFilteredCustomersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/filtered")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInvoiceRequest calls the generic CreateInvoice builder with application/json body
func NewCreateInvoiceRequest(server string, body CreateInvoiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInvoiceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInvoiceRequestWithBody generates requests for CreateInvoice with any type of body
func NewCreateInvoiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllInvoicesCountRequest generates requests for GetAllInvoicesCount
func NewGetAllInvoicesCountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFilteredInvoicesListRequest generates requests for GetFilteredInvoicesList
func NewGetFilteredInvoicesListRequest(server string, params *GetFilteredInvoicesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/filtered")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLatestInvoicesListRequest generates requests for GetLatestInvoicesList
func NewGetLatestInvoicesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllInvoicesStatusCountRequest generates requests for GetAllInvoicesStatusCount
func NewGetAllInvoicesStatusCountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/status/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteInvoiceByIdRequest generates requests for DeleteInvoiceById
func NewDeleteInvoiceByIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoiceByIdRequest generates requests for GetInvoiceById
func NewGetInvoiceByIdRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInvoiceByIdRequest calls the generic UpdateInvoiceById builder with application/json body
func NewUpdateInvoiceByIdRequest(server string, id openapi_types.UUID, body UpdateInvoiceByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInvoiceByIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInvoiceByIdRequestWithBody generates requests for UpdateInvoiceById with any type of body
func NewUpdateInvoiceByIdRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoices/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginUserRequest calls the generic LoginUser builder with application/json body
func NewLoginUserRequest(server string, body LoginUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginUserRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginUserRequestWithBody generates requests for LoginUser with any type of body
func NewLoginUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterUserRequest calls the generic RegisterUser builder with application/json body
func NewRegisterUserRequest(server string, body RegisterUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterUserRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterUserRequestWithBody generates requests for RegisterUser with any type of body
func NewRegisterUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllRevenueListRequest generates requests for GetAllRevenueList
func NewGetAllRevenueListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/revenues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllCustomersListWithResponse request
	GetAllCustomersListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCustomersListResponse, error)

	// GetAllCustomersCountWithResponse request
	GetAllCustomersCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCustomersCountResponse, error)

	// GetFilteredCustomersListWithResponse request
	GetFilteredCustomersListWithResponse(ctx context.Context, params *GetFilteredCustomersListParams, reqEditors ...RequestEditorFn) (*GetFilteredCustomersListResponse, error)

	// CreateInvoiceWithBodyWithResponse request with any body
	CreateInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInvoiceResponse, error)

	CreateInvoiceWithResponse(ctx context.Context, body CreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInvoiceResponse, error)

	// GetAllInvoicesCountWithResponse request
	GetAllInvoicesCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllInvoicesCountResponse, error)

	// GetFilteredInvoicesListWithResponse request
	GetFilteredInvoicesListWithResponse(ctx context.Context, params *GetFilteredInvoicesListParams, reqEditors ...RequestEditorFn) (*GetFilteredInvoicesListResponse, error)

	// GetLatestInvoicesListWithResponse request
	GetLatestInvoicesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLatestInvoicesListResponse, error)

	// GetAllInvoicesStatusCountWithResponse request
	GetAllInvoicesStatusCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllInvoicesStatusCountResponse, error)

	// DeleteInvoiceByIdWithResponse request
	DeleteInvoiceByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteInvoiceByIdResponse, error)

	// GetInvoiceByIdWithResponse request
	GetInvoiceByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvoiceByIdResponse, error)

	// UpdateInvoiceByIdWithBodyWithResponse request with any body
	UpdateInvoiceByIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInvoiceByIdResponse, error)

	UpdateInvoiceByIdWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateInvoiceByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInvoiceByIdResponse, error)

	// LoginUserWithBodyWithResponse request with any body
	LoginUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginUserResponse, error)

	LoginUserWithResponse(ctx context.Context, body LoginUserJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginUserResponse, error)

	// RegisterUserWithBodyWithResponse request with any body
	RegisterUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterUserResponse, error)

	RegisterUserWithResponse(ctx context.Context, body RegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterUserResponse, error)

	// GetAllRevenueListWithResponse request
	GetAllRevenueListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllRevenueListResponse, error)
}

type GetAllCustomersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllCustomersListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllCustomersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCustomersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllCustomersCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllCustomersCountResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllCustomersCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCustomersCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilteredCustomersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilteredCustomersListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFilteredCustomersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilteredCustomersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InvoiceResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllInvoicesCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllInvoicesCountResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllInvoicesCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllInvoicesCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilteredInvoicesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FilteredInvoicesListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFilteredInvoicesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilteredInvoicesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLatestInvoicesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LatestInvoicesListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetLatestInvoicesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLatestInvoicesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllInvoicesStatusCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoicesStatusCountResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllInvoicesStatusCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllInvoicesStatusCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInvoiceByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteInvoiceByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInvoiceByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetInvoiceByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInvoiceByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceResponse
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateInvoiceByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInvoiceByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r LoginUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RegisterUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllRevenueListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllRevenueListResponse
	JSON400      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAllRevenueListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllRevenueListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllCustomersListWithResponse request returning *GetAllCustomersListResponse
func (c *ClientWithResponses) GetAllCustomersListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCustomersListResponse, error) {
	rsp, err := c.GetAllCustomersList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCustomersListResponse(rsp)
}

// GetAllCustomersCountWithResponse request returning *GetAllCustomersCountResponse
func (c *ClientWithResponses) GetAllCustomersCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllCustomersCountResponse, error) {
	rsp, err := c.GetAllCustomersCount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCustomersCountResponse(rsp)
}

// GetFilteredCustomersListWithResponse request returning *GetFilteredCustomersListResponse
func (c *ClientWithResponses) GetFilteredCustomersListWithResponse(ctx context.Context, params *GetFilteredCustomersListParams, reqEditors ...RequestEditorFn) (*GetFilteredCustomersListResponse, error) {
	rsp, err := c.GetFilteredCustomersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilteredCustomersListResponse(rsp)
}

// CreateInvoiceWithBodyWithResponse request with arbitrary body returning *CreateInvoiceResponse
func (c *ClientWithResponses) CreateInvoiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInvoiceResponse, error) {
	rsp, err := c.CreateInvoiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvoiceResponse(rsp)
}

func (c *ClientWithResponses) CreateInvoiceWithResponse(ctx context.Context, body CreateInvoiceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInvoiceResponse, error) {
	rsp, err := c.CreateInvoice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInvoiceResponse(rsp)
}

// GetAllInvoicesCountWithResponse request returning *GetAllInvoicesCountResponse
func (c *ClientWithResponses) GetAllInvoicesCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllInvoicesCountResponse, error) {
	rsp, err := c.GetAllInvoicesCount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllInvoicesCountResponse(rsp)
}

// GetFilteredInvoicesListWithResponse request returning *GetFilteredInvoicesListResponse
func (c *ClientWithResponses) GetFilteredInvoicesListWithResponse(ctx context.Context, params *GetFilteredInvoicesListParams, reqEditors ...RequestEditorFn) (*GetFilteredInvoicesListResponse, error) {
	rsp, err := c.GetFilteredInvoicesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFilteredInvoicesListResponse(rsp)
}

// GetLatestInvoicesListWithResponse request returning *GetLatestInvoicesListResponse
func (c *ClientWithResponses) GetLatestInvoicesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLatestInvoicesListResponse, error) {
	rsp, err := c.GetLatestInvoicesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLatestInvoicesListResponse(rsp)
}

// GetAllInvoicesStatusCountWithResponse request returning *GetAllInvoicesStatusCountResponse
func (c *ClientWithResponses) GetAllInvoicesStatusCountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllInvoicesStatusCountResponse, error) {
	rsp, err := c.GetAllInvoicesStatusCount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllInvoicesStatusCountResponse(rsp)
}

// DeleteInvoiceByIdWithResponse request returning *DeleteInvoiceByIdResponse
func (c *ClientWithResponses) DeleteInvoiceByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteInvoiceByIdResponse, error) {
	rsp, err := c.DeleteInvoiceById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInvoiceByIdResponse(rsp)
}

// GetInvoiceByIdWithResponse request returning *GetInvoiceByIdResponse
func (c *ClientWithResponses) GetInvoiceByIdWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInvoiceByIdResponse, error) {
	rsp, err := c.GetInvoiceById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceByIdResponse(rsp)
}

// UpdateInvoiceByIdWithBodyWithResponse request with arbitrary body returning *UpdateInvoiceByIdResponse
func (c *ClientWithResponses) UpdateInvoiceByIdWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInvoiceByIdResponse, error) {
	rsp, err := c.UpdateInvoiceByIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInvoiceByIdResponse(rsp)
}

func (c *ClientWithResponses) UpdateInvoiceByIdWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateInvoiceByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInvoiceByIdResponse, error) {
	rsp, err := c.UpdateInvoiceById(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInvoiceByIdResponse(rsp)
}

// LoginUserWithBodyWithResponse request with arbitrary body returning *LoginUserResponse
func (c *ClientWithResponses) LoginUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginUserResponse, error) {
	rsp, err := c.LoginUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginUserResponse(rsp)
}

func (c *ClientWithResponses) LoginUserWithResponse(ctx context.Context, body LoginUserJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginUserResponse, error) {
	rsp, err := c.LoginUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginUserResponse(rsp)
}

// RegisterUserWithBodyWithResponse request with arbitrary body returning *RegisterUserResponse
func (c *ClientWithResponses) RegisterUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterUserResponse, error) {
	rsp, err := c.RegisterUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterUserResponse(rsp)
}

func (c *ClientWithResponses) RegisterUserWithResponse(ctx context.Context, body RegisterUserJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterUserResponse, error) {
	rsp, err := c.RegisterUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterUserResponse(rsp)
}

// GetAllRevenueListWithResponse request returning *GetAllRevenueListResponse
func (c *ClientWithResponses) GetAllRevenueListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllRevenueListResponse, error) {
	rsp, err := c.GetAllRevenueList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllRevenueListResponse(rsp)
}

// ParseGetAllCustomersListResponse parses an HTTP response from a GetAllCustomersListWithResponse call
func ParseGetAllCustomersListResponse(rsp *http.Response) (*GetAllCustomersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCustomersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllCustomersListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAllCustomersCountResponse parses an HTTP response from a GetAllCustomersCountWithResponse call
func ParseGetAllCustomersCountResponse(rsp *http.Response) (*GetAllCustomersCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCustomersCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllCustomersCountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetFilteredCustomersListResponse parses an HTTP response from a GetFilteredCustomersListWithResponse call
func ParseGetFilteredCustomersListResponse(rsp *http.Response) (*GetFilteredCustomersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilteredCustomersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilteredCustomersListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseCreateInvoiceResponse parses an HTTP response from a CreateInvoiceWithResponse call
func ParseCreateInvoiceResponse(rsp *http.Response) (*CreateInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAllInvoicesCountResponse parses an HTTP response from a GetAllInvoicesCountWithResponse call
func ParseGetAllInvoicesCountResponse(rsp *http.Response) (*GetAllInvoicesCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllInvoicesCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllInvoicesCountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetFilteredInvoicesListResponse parses an HTTP response from a GetFilteredInvoicesListWithResponse call
func ParseGetFilteredInvoicesListResponse(rsp *http.Response) (*GetFilteredInvoicesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFilteredInvoicesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FilteredInvoicesListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLatestInvoicesListResponse parses an HTTP response from a GetLatestInvoicesListWithResponse call
func ParseGetLatestInvoicesListResponse(rsp *http.Response) (*GetLatestInvoicesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLatestInvoicesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LatestInvoicesListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAllInvoicesStatusCountResponse parses an HTTP response from a GetAllInvoicesStatusCountWithResponse call
func ParseGetAllInvoicesStatusCountResponse(rsp *http.Response) (*GetAllInvoicesStatusCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllInvoicesStatusCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoicesStatusCountResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteInvoiceByIdResponse parses an HTTP response from a DeleteInvoiceByIdWithResponse call
func ParseDeleteInvoiceByIdResponse(rsp *http.Response) (*DeleteInvoiceByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInvoiceByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetInvoiceByIdResponse parses an HTTP response from a GetInvoiceByIdWithResponse call
func ParseGetInvoiceByIdResponse(rsp *http.Response) (*GetInvoiceByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateInvoiceByIdResponse parses an HTTP response from a UpdateInvoiceByIdWithResponse call
func ParseUpdateInvoiceByIdResponse(rsp *http.Response) (*UpdateInvoiceByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateInvoiceByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseLoginUserResponse parses an HTTP response from a LoginUserWithResponse call
func ParseLoginUserResponse(rsp *http.Response) (*LoginUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseRegisterUserResponse parses an HTTP response from a RegisterUserWithResponse call
func ParseRegisterUserResponse(rsp *http.Response) (*RegisterUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAllRevenueListResponse parses an HTTP response from a GetAllRevenueListWithResponse call
func ParseGetAllRevenueListResponse(rsp *http.Response) (*GetAllRevenueListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllRevenueListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllRevenueListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all customers
	// (GET /customers)
	GetAllCustomersList(c *gin.Context)
	// Get all customers count
	// (GET /customers/count)
	GetAllCustomersCount(c *gin.Context)
	// Get filtered customers
	// (GET /customers/filtered)
	GetFilteredCustomersList(c *gin.Context, params GetFilteredCustomersListParams)
	// Create a new invoice
	// (POST /invoices)
	CreateInvoice(c *gin.Context)
	// Get all invoices count
	// (GET /invoices/count)
	GetAllInvoicesCount(c *gin.Context)
	// Get filtered invoices
	// (GET /invoices/filtered)
	GetFilteredInvoicesList(c *gin.Context, params GetFilteredInvoicesListParams)
	// Get latest invoices
	// (GET /invoices/latest)
	GetLatestInvoicesList(c *gin.Context)
	// Get all invoices status count
	// (GET /invoices/status/count)
	GetAllInvoicesStatusCount(c *gin.Context)
	// Delete an invoice by ID
	// (DELETE /invoices/{id})
	DeleteInvoiceById(c *gin.Context, id openapi_types.UUID)
	// Find an invoice by ID
	// (GET /invoices/{id})
	GetInvoiceById(c *gin.Context, id openapi_types.UUID)
	// Update an invoice by ID
	// (PATCH /invoices/{id})
	UpdateInvoiceById(c *gin.Context, id openapi_types.UUID)
	// Login a user
	// (POST /login)
	LoginUser(c *gin.Context)
	// Register a new user
	// (POST /register)
	RegisterUser(c *gin.Context)
	// Get all revenue
	// (GET /revenues)
	GetAllRevenueList(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllCustomersList operation middleware
func (siw *ServerInterfaceWrapper) GetAllCustomersList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllCustomersList(c)
}

// GetAllCustomersCount operation middleware
func (siw *ServerInterfaceWrapper) GetAllCustomersCount(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllCustomersCount(c)
}

// GetFilteredCustomersList operation middleware
func (siw *ServerInterfaceWrapper) GetFilteredCustomersList(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFilteredCustomersListParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFilteredCustomersList(c, params)
}

// CreateInvoice operation middleware
func (siw *ServerInterfaceWrapper) CreateInvoice(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateInvoice(c)
}

// GetAllInvoicesCount operation middleware
func (siw *ServerInterfaceWrapper) GetAllInvoicesCount(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllInvoicesCount(c)
}

// GetFilteredInvoicesList operation middleware
func (siw *ServerInterfaceWrapper) GetFilteredInvoicesList(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFilteredInvoicesListParams

	// ------------- Optional query parameter "query" -------------

	err = runtime.BindQueryParameter("form", true, false, "query", c.Request.URL.Query(), &params.Query)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter query: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetFilteredInvoicesList(c, params)
}

// GetLatestInvoicesList operation middleware
func (siw *ServerInterfaceWrapper) GetLatestInvoicesList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLatestInvoicesList(c)
}

// GetAllInvoicesStatusCount operation middleware
func (siw *ServerInterfaceWrapper) GetAllInvoicesStatusCount(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllInvoicesStatusCount(c)
}

// DeleteInvoiceById operation middleware
func (siw *ServerInterfaceWrapper) DeleteInvoiceById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteInvoiceById(c, id)
}

// GetInvoiceById operation middleware
func (siw *ServerInterfaceWrapper) GetInvoiceById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetInvoiceById(c, id)
}

// UpdateInvoiceById operation middleware
func (siw *ServerInterfaceWrapper) UpdateInvoiceById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateInvoiceById(c, id)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// GetAllRevenueList operation middleware
func (siw *ServerInterfaceWrapper) GetAllRevenueList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAllRevenueList(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/customers", wrapper.GetAllCustomersList)
	router.GET(options.BaseURL+"/customers/count", wrapper.GetAllCustomersCount)
	router.GET(options.BaseURL+"/customers/filtered", wrapper.GetFilteredCustomersList)
	router.POST(options.BaseURL+"/invoices", wrapper.CreateInvoice)
	router.GET(options.BaseURL+"/invoices/count", wrapper.GetAllInvoicesCount)
	router.GET(options.BaseURL+"/invoices/filtered", wrapper.GetFilteredInvoicesList)
	router.GET(options.BaseURL+"/invoices/latest", wrapper.GetLatestInvoicesList)
	router.GET(options.BaseURL+"/invoices/status/count", wrapper.GetAllInvoicesStatusCount)
	router.DELETE(options.BaseURL+"/invoices/:id", wrapper.DeleteInvoiceById)
	router.GET(options.BaseURL+"/invoices/:id", wrapper.GetInvoiceById)
	router.PATCH(options.BaseURL+"/invoices/:id", wrapper.UpdateInvoiceById)
	router.POST(options.BaseURL+"/login", wrapper.LoginUser)
	router.POST(options.BaseURL+"/register", wrapper.RegisterUser)
	router.GET(options.BaseURL+"/revenues", wrapper.GetAllRevenueList)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9Ra62/bNhD/VwxuH4XYaQus8Lc0aYcMQTGk6/YhMApGOtvsJFElqXRGoP994EuiLOph",
	"RU5iFChiibzHj3fHe+gRhTTJaAqp4Gj5iBj8yIGLDzQioB5cMsACrtMHSkK4Ld/u5LuQpgJSIf/EWRaT",
	"EAtC0/l3TlP5jIdbSLD861cGa7REv8wrZnP9ls99DFBRFEVgeH/lwI7H2KFuuN7QDUmPxXSfuOH5NYsq",
	"ED7srqNj8G5jomQoAsSAZzTl+twv4vgy54ImwPglzVNxa94eJE7GaAZMGFvCGfkbGCd6VZeoF9XKIkAR",
	"Fr3KOfIqcZHW6EdOGERoeecyNxRXARK7DNAS0fvvECocAhQBDxnJhJIS/Q5iFhq6s1ASnlmYpGQuSjeE",
	"vyRIRECiCJR/DIRLbjY4YMbwrhs5TX0odDiOK/hiwhvoGWs8CROryTqhfUmQiKHtt7FbeIA0h1OzMCP2",
	"sQ2MaTZN+/rIGGUTAAaSTp++illDNb11iDZqf038TyQWwCA6zQizL/0xrWBteHXEGiuOdeKTxNII34Qy",
	"QIIKHF9bYuYtSQVsgHVD7ewcjbsJX03Yy7zuFCL7RDHdUPPhwL8ILPKTuu0ciSe886zBcEXdc+vdYAFc",
	"nKS31kQ/ZtiLFaN251PFxis3s7Igmsi4FL0aCrraetUgTKi/JOWoXwRGof2irqkgieT/a8oSLNAS5TmJ",
	"UMmQC0bSjdQnxQk4V4x9sSe82quWNoWulU06sDSEUZfSgJtMr2vhYfPPBvWEpmLrUULSLrf0cNY0qh1e",
	"GWo2E8Ea57HE9uHch6y3E9K0w8Qiti9ggGz6823gWUZYQJ9tXsk10oxUpB54a+hLo4GZK19gNSlJG3l8",
	"QDZ7Nc0kPcEk9p5pi8UGKMOc/6Qs6jdnRSIwPJyNPlmvDKgl+korD/ofbVlRVySkEfiPNwHO8WaA99mF",
	"gSbmk7KRnrcDWipi1W9o8rTQYVLQb7YG9iuv12SYRJ3vIY0k0X7/rSJUda57cuwTrQnRBaq9+1+N87Y7",
	"x0BmJMEb+JazAz1siqDhHlQlRnVoZRgxfmZ4+s7n1Z3LQJKTwTg6ANdpy+iQ5okkq3whQNZFVh7p632z",
	"I1z1vlKlwaY9cgyPGa3KVrLUk/+DDO1lnHSct3lVL1P5Z7hLBP0X0oHqVOFd7ukUvT+96NfATSuqnK98",
	"GvSIPCjJaJ3lnHy+2FSVv2h20ps2eKqyAHEIc0bE7ovUU0v8ATADdpHryuNe/fpkhfrjn7+QKdUkJf22",
	"knIrRKarPZKuqZKSiFi+uQHM0tln+E/MrjDf3lPMotnFn9coQA+29EDnZ4uzhdSRZpDijKAlenu2OHur",
	"rExslXhzawzq1waUyUjEVXl8Hemew/7AC+2NDd8sFm1HXq6bt07NigC9G0Kg3thXeOdJgtnOM3ZSaRze",
	"cLf+QCu5p9J4HlofGaL3pbk1n6Z4vQd4FM11W22I/raR2wWBdxyhLIjhBIQynLtHRKTB/ciB7ayjVD+r",
	"3sq+k63GwNk9IJkK0sZwocOi3BImo9wDZK3IR4HzwcWuXVTnm4x56wcZRQPC837l9/vzU4CmJZzhWQo/",
	"bXPSgcw+qSM2yAXrmeRID/SPnKd0wPowt1/1Q7zP7YhP5XyBf2NMEiJ8G5302L+TrtccerY+yeO9c4HJ",
	"Hd5tBHSfoO7Ed51fc54xyn47xiJTqV+fKgxQXmd6BzmwW6mNgaFrnHYUT3bnVP2IPJKo0Nl/DDpjroNx",
	"pZ472XuLJ8vkrPIqlXpWuahgObge1pPgehzunZbRHR98prNLMx8ZiaPc9e5p6Gt4ZjgtR1v3u9n1lRf3",
	"oNXcXhzexbNdvxNg/omk0VDEMyzCbRPzRk36bLAfmEJ1fm1ZnPY5at2GnaSMWTHdkLQ9Xa16OiNw9n5J",
	"Owrf+iT7CRHelOVoebdyUdNTYzzLtaYWKvVT48RgQ7gwnQgvVLdmxVi0/F87j8rqayPv6dGympoUvws0",
	"NRvt6yg4nzeOTep9X0hOmQjYKW+lZjn3Lfagqnd67lYyRHFgDzYGqv6s6ugs5/PFmfq3fL94v5jjjMwf",
	"zpHMqmuLYhrieEu56F52/uY3Re28vmxV/B8AAP//oqTggeUvAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
